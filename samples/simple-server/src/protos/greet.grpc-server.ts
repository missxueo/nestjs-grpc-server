// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size,output_typescript,long_type_bigint,server_grpc1,server_generic
// @generated from protobuf file "protos/greet.proto" (package "greet.v1", syntax proto3)
// tslint:disable
import { GreetResponse } from "./greet";
import { GreetRequest } from "./greet";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service greet.v1.GreetService
 */
export interface IGreetService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: Hello(greet.v1.GreetRequest) returns (greet.v1.GreetResponse);
     */
    hello: grpc.handleUnaryCall<GreetRequest, GreetResponse>;
    /**
     * @generated from protobuf rpc: Hi(greet.v1.GreetRequest) returns (stream greet.v1.GreetResponse);
     */
    hi: grpc.handleServerStreamingCall<GreetRequest, GreetResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service greet.v1.GreetService.
 *
 * Usage: Implement the interface IGreetService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IGreetService = ...
 * server.addService(greetServiceDefinition, service);
 * ```
 */
export const greetServiceDefinition: grpc.ServiceDefinition<IGreetService> = {
    hello: {
        path: "/greet.v1.GreetService/Hello",
        originalName: "Hello",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GreetResponse.fromBinary(bytes),
        requestDeserialize: bytes => GreetRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GreetResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GreetRequest.toBinary(value))
    },
    hi: {
        path: "/greet.v1.GreetService/Hi",
        originalName: "Hi",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => GreetResponse.fromBinary(bytes),
        requestDeserialize: bytes => GreetRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GreetResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GreetRequest.toBinary(value))
    }
};
